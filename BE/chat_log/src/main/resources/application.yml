server:
  port: 8088

  servlet:
    context-path: /api/chat-log
    encoding:
      charset: utf-8
      enabled: true

eureka:
  client:
    register-with-eureka: true # true
    fetch-registry: true   #true
    service-url:
      #      defaultZone: http://localhost:8761/eureka
      defaultZone: http://eureka:8761/eureka

logging:
  level:
    org:
      jsoup: trace

spring:
  application:
    name: chat-log

  profiles:
    default: local # 기본 환경을 local로

  integration:
    poller:
      fixed-delay: 5000
      maxMessagesPerPoll: 10000
      initialDelay: 5000

  #    redis:
  #      host: localhost
  #      port: 6379

  cloud:
    function:
      definition: getGameCondition;highlight; #process;
      #      routing-expression:
      #
    stream:
      default-binder: kafka

      bindings:
        getGameCondition-in-0:
          destination: game-event
          group: game-group1 # 컨슈머 그룹
          content-type: application/json;type=com.backtoback.chat_log.chat_log.dto.request.GameConditionDto
          consumer:
            #            batch-mode: true #한꺼번에 가져오기
            partitioned: false

        highlight-out-0:
          destination: highlight-event
          content-type: application/json;

      kafka:
        binder:
          auto-create-topics: false # 바인더는 이미 구성된 주제에 의존합니다. 항목이 없으면 바인더가 시작되지 않습니다.
          brokers: localhost:9092 # k8a708.p.ssafy.io:9092

  kafka:
    bootstrap-servers: localhost:9092 #k8a708.p.ssafy.io:9092

    #    consumer:
    #      auto-offset-reset: latest
    #      max-poll-records: 100000
    #      bootstrap-servers: localhost:9092
    #      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
    #      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
    #      enable-auto-commit: true
    #      properties:
    #        spring:
    #          deserializer:
    #            key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
    #            value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
    #          json:
    #            value:
    #              default:
    #                type: com.backtoback.chat_log.chat_log.dto.request.ChatMessageDto
    #            trusted:
    #              packages: com.backtoback.chat_log.chat_log.dto

    listener:
      type: batch
      idle-between-polls: 5000
      ack-mode: batch
      poll-timeout: 1
      idleEventInterval: 0




  datasource:
    # develop 브랜치 용
    #    driver-class-name: org.mariadb.jdbc.Driver
    #    url: jdbc:mariadb://localhost:3306/backtoback?useUnicode=true&characterEncoding=utf-8
    #    username: root
    #    password: ssafy

    # ssafy 노트북 local 용
    #    driver-class-name: org.mariadb.jdbc.Driver
    #    url: jdbc:mariadb://localhost:3306/backtoback?useUnicode=true&characterEncoding=utf-8
    #    username: root
    #    password: ssafy

    # 효진 노트북 local 용
    #    url: jdbc:mysql://localhost:3306/backtoback?useUnicode=true&characterEncoding=utf-8
    #    username: ssafy
    #    password: ssafy
    #    driver-class-name: com.mysql.cj.jdbc.Driver

    #추가
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedStatements: true


  output.ansi.enabled: always
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none # create, update, none
    #      naming:
    #    physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    #    show-sql: true
    generate-ddl: false
    properties:
      hibernate:
        #        dialect:
        #        default_schema:
        format_sql: true
    defer-datasource-initialization: true


  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: Asia/Seoul

  mvc:
    log-request-details: true # request의 parameter 값 등을 log에서 못 보는 설정 해제

#  servlet:
#    multipart:
#      maxFileSize: 10MB
#      max-request-size: 10MB


logging.level:
  com.backtoback.chat_log: trace
  project.user.UserClient: DEBUG
  #  org.apache: trace
  org.hibernate.SQL: debug
  org.hibernate.type: trace
  org:
    springframework:
      core: trace
      #      beans: trace
      cloud.stream: trace
      cloud.stream.binder: trace
      cloud.stream.binding: trace
      #      messaging: trace

      kafka: info

      security: trace

      boot:
        autoconfigure:
          security: trace
      web: trace

      http: trace
